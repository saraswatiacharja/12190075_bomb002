# 12190075_bomb002
//phase3(12190075)

lab-2@lab2-OptiPlex-3040:~/Desktop/saras/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_3
Breakpoint 1 at 0x400f0d
(gdb) run assign.txt
Starting program: /home/lab-2/Desktop/saras/Assignment 1/bomb002/bomb assign.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
4 3								//i have entered the two integer as a user input to test

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>      //function(we get idea that we need integer as input)
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax				// compare 1 with result from input
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>			//The code get jump if %eax greater than 1 if not explode bomb
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)				//compares 7 with rsp value
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>			//it gets jump if its above 7
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)				
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>			//jump if value of rsp is greater than 5
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>			//jump if it is only the value of 0x4(%rsp) and %eax
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax				//compares
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) x/d 0x0000000000400f33 						
0x400f33 <phase_3+38>:	2130835587
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400f33
0x0000000000400f33 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f33 <+38>:	cmp    $0x1,%eax				//compares 1 with %eax value
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) i r							//information register 
rax            0x2                 2
rbx            0x7fffffffdf58      140737488346968
rcx            0x0                 0
rdx            0x7fffffffde44      140737488346692
rsi            0x0                 0
rdi            0x7fffffffd7f0      140737488345072
rbp            0x0                 0x0
rsp            0x7fffffffde40      0x7fffffffde40
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400f33            0x400f33 <phase_3+38>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni						// next instruction
0x0000000000400f36 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
=> 0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>		//jump if greater than 1
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400f3d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdf58      140737488346968
rcx            0x0                 0
rdx            0x7fffffffde44      140737488346692
rsi            0x0                 0
rdi            0x7fffffffd7f0      140737488345072
rbp            0x0                 0x0
rsp            0x7fffffffde40      0x7fffffffde40
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400f3d            0x400f3d <phase_3+48>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffde40
0x7fffffffde40:	4
(gdb) ni
0x0000000000400f41 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
=> 0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400f43 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
=> 0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400fa8
0x0000000000400fa8 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
=> 0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400fac in phase_3 ()
(gdb) ni
0x0000000000400fae in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:	sub    $0x18,%rsp
   0x0000000000400f11 <+4>:	mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:	xor    %eax,%eax
   0x0000000000400f21 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:	mov    %rsp,%rdx
   0x0000000000400f29 <+28>:	mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:	cmp    $0x1,%eax
   0x0000000000400f36 <+41>:	jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:	callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:	cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:	ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:	mov    (%rsp),%eax
   0x0000000000400f46 <+57>:	jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:	mov    $0x380,%eax
   0x0000000000400f52 <+69>:	jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:	mov    $0x0,%eax
   0x0000000000400f59 <+76>:	sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:	jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:	mov    $0x0,%eax
   0x0000000000400f65 <+88>:	add    $0x21e,%eax
   0x0000000000400f6a <+93>:	jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:	mov    $0x0,%eax
   0x0000000000400f71 <+100>:	sub    $0x34,%eax
   0x0000000000400f74 <+103>:	jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:	mov    $0x0,%eax
   0x0000000000400f7b <+110>:	add    $0x34,%eax
   0x0000000000400f7e <+113>:	jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:	mov    $0x0,%eax
   0x0000000000400f85 <+120>:	sub    $0x34,%eax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400f88 <+123>:	jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:	mov    $0x0,%eax
   0x0000000000400f8f <+130>:	add    $0x34,%eax
   0x0000000000400f92 <+133>:	jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:	mov    $0x0,%eax
   0x0000000000400f99 <+140>:	sub    $0x34,%eax
   0x0000000000400f9c <+143>:	jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:	callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:	mov    $0x0,%eax
   0x0000000000400fa8 <+155>:	cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:	jg     0x400fb4 <phase_3+167>
=> 0x0000000000400fae <+161>:	cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:	je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:	callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:	mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:	xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:	je     0x400fce <phase_3+193>
   0x0000000000400fc9 <+188>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:	add    $0x18,%rsp
   0x0000000000400fd2 <+197>:	retq   
End of assembler dump.
(gdb) i r
rax            0x0                 0
rbx            0x7fffffffdf58      140737488346968
rcx            0x0                 0
rdx            0x7fffffffde44      140737488346692
rsi            0x0                 0
rdi            0x7fffffffd7f0      140737488345072
rbp            0x0                 0x0
rsp            0x7fffffffde40      0x7fffffffde40
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400fae            0x400fae <phase_3+161>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffde44
0x7fffffffde44:	3
(gdb) i r
rax            0x0                 0
rbx            0x7fffffffdf58      140737488346968
rcx            0x0                 0
rdx            0x7fffffffde44      140737488346692
rsi            0x0                 0
rdi            0x7fffffffd7f0      140737488345072
rbp            0x0                 0x0
rsp            0x7fffffffde40      0x7fffffffde40
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f62ac0      140737353493184
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400fae            0x400fae <phase_3+161>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) del
Delete all breakpoints? (y or n) y
(gdb) run assign.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/lab-2/Desktop/saras/Assignment 1/bomb002/bomb assign.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
4 0					//Solution for phase_3
Halfway there!
