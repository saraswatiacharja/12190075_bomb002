//phase1(12190075)

lab-2@lab2-OptiPlex-3040:~/Desktop/saras/Assignment 1/bomb002$ gdb bomb   //GNU debugger
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_1		//we need to set breakpoint inorder to stop execution
Breakpoint 1 at 0x400e8d
(gdb) disas			//disas stands for disassemble which converts a program in its executable (ready-to-run) form
No frame selected.
(gdb) r			// r stands for run which will start the program/execution
Starting program: /home/lab-2/Desktop/saras/Assignment 1/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
1 2 3 4      					//user input(it can be string or number as we dont know what is the input type, so for trial i have entered the integers 1 2 3 4   

Breakpoint 1, 0x0000000000400e8d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp			//stack frameof 8 bytes
   0x0000000000400e91 <+4>:	mov    $0x4023cc,%esi			//what is being moved? 
   0x0000000000400e96 <+9>:	callq  0x401339 <strings_not_equal>  //we understand from here that the user input is string 
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400e9b         // u stands for until, we used until* when we directly want to move by not using ni(next instruction) again and again.
0x0000000000400e9b in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:	callq  0x401339 <strings_not_equal>
=> 0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) i r					//information register
rax            0x1                 1
rbx            0x4021f0            4202992
rcx            0x7                 7
rdx            0x1                 1
rsi            0x4023cc            4203468
rdi            0x4023e9            4203497
rbp            0x0                 0x0
rsp            0x7fffffffde70      0x7fffffffde70
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7ffff7dfb400      140737352020992
r12            0x400c60            4197472
r13            0x7fffffffdf70      140737488346992
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) ni							//next instruction
0x0000000000400e9d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:	callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
=> 0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:	callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
=> 0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400e9f in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:	callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
=> 0x0000000000400e9f <+18>:	callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) x/s 0x4023cc 						//x/s= printing (above adress gives the actual string to difuse the bomb in phase 1)
0x4023cc:	"Public speaking is very easy."    		//this the the actual string (THE SOLUTION FOR PHASE1)
